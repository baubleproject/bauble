// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Profile {
    id        String @id @default(uuid())
    userId    String @unique
    firstname String
    lastname  String
    imageUrl  String @db.Text
    email     String @db.Text

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    members Member[]
}

enum MemberRole {
    ADMIN
    GUEST
}

model Member {
    id        String     @id @default(uuid())
    role      MemberRole @default(GUEST)
    profileId String
    profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
    projectId String

    tasks Task[] @relation("AssignedToMember")

    @@index([profileId])
    @@index([projectId])
}

model Project {
    id          String   @id @default(uuid())
    name        String
    imageUrl    String   @default("https://images.pexels.com/photos/301614/pexels-photo-301614.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2") @db.Text
    inviteCode  String   @unique
    description String? // Description of the project
    createdBy   String // ID of the user who created the project
    members     Member[]
    tasks       Task[]   @relation("ProjectTasks")
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model Task {
    id          String     @id @default(uuid())
    name        String
    description String?
    priority    Priority
    start       DateTime   @default(now())
    end         DateTime
    progress    Int?
    status      TaskStatus @default(OPEN)
    project     Project    @relation("ProjectTasks", fields: [projectId], references: [id])
    projectId   String

    assignedTo Member? @relation("AssignedToMember", fields: [memberId], references: [id], map: "assignedToMap")
    memberId   String

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    taskId String?

    @@index([projectId])
}

enum Priority {
    LOW
    MEDIUM
    HIGH
    URGENT
}

enum TaskStatus {
    OPEN
    IN_PROGRESS
    COMPLETED
    CANCELED
}
